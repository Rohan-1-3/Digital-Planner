(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var o=n.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"1f757ac1762962d60ddc.png",n=e.p+"d367d5dbff6ca8e7e2f2.png",o=e.p+"df3b5dddd60da7069980.png",c=e.p+"fe50e1a3f0405d606b0c.png",s=e.p+"cfabfc38136dc55a9a0d.png",r=[],l=()=>{const e=document.querySelector(".tasks"),t=document.querySelector(".bg-image");e.childElementCount>1?t.src=c:1===e.childElementCount&&(t.src=s)},a=class{constructor(e,t,n,o,c){this.project=e,this.title=t,this.date=n,this.type=o,this.status=c}addingNewTask(){const e=document.querySelector(".tasks"),t=document.createElement("div");t.classList.add("task");const c=document.createElement("p");c.textContent=this.title;const s=document.createElement("p");s.textContent=this.date;const a=document.createElement("p");a.textContent=this.type;const d=document.createElement("div");d.classList.add("task-option");const i=new Image;i.src=o;const u=new Image;u.src=n,"complete"===this.status&&t.classList.add("complete"),e.appendChild(t),t.appendChild(c),t.appendChild(s),t.appendChild(a),t.appendChild(d),d.appendChild(i),d.appendChild(u),l(),i.addEventListener("click",(()=>{const e=i.parentNode.parentNode.children[0].textContent;for(let t=0;t<r.length;t+=1)e===r[t].title&&("complete"===r[t].status?r[t].status="incomplete":"incomplete"===r[t].status&&(r[t].status="complete"));i.parentNode.parentNode.classList.toggle("complete")})),u.addEventListener("click",(()=>{const e=u.parentNode.parentNode.children[0].textContent;for(let t=0;t<r.length;t+=1)e===r[t].title&&r.splice(t,1);u.parentNode.parentNode.remove(),l()}))}};function d(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function u(e){d(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===i(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function m(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var p={};function h(){return p}function g(e,t){var n,o,c,s,r,l,a,i;d(1,arguments);var p=h(),g=m(null!==(n=null!==(o=null!==(c=null!==(s=null==t?void 0:t.weekStartsOn)&&void 0!==s?s:null==t||null===(r=t.locale)||void 0===r||null===(l=r.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==c?c:p.weekStartsOn)&&void 0!==o?o:null===(a=p.locale)||void 0===a||null===(i=a.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==n?n:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=u(e),y=v.getDay(),f=(y<g?7:0)+y-g;return v.setDate(v.getDate()-f),v.setHours(0,0,0,0),v}function v(e,t,n){d(2,arguments);var o=g(e,n),c=g(t,n);return o.getTime()===c.getTime()}function y(e,t){return d(2,arguments),v(e,t,{weekStartsOn:1})}const f=document.querySelector(".tasks"),S=document.querySelector(".task-list").children[0],w=document.querySelector(".add-task"),k=document.querySelector(".new-project"),L=document.querySelector(".project-form"),C=document.querySelector(".add-button"),q=document.querySelector(".new-projects"),N=document.querySelector(".cancle-button"),b=document.querySelector(".tasks"),E=()=>{for(;b.childElementCount>1;)b.lastChild.remove();const e=document.querySelector(".task-list").children[0].textContent;for(let t=0;t<r.length;t+=1)e===r[t].project&&new a(r[t].project,r[t].title,r[t].date,r[t].type,r[t].status).addingNewTask();l()},j=()=>{const e=document.querySelectorAll("#project"),t=document.querySelector(".task-list");e.forEach((e=>{e.addEventListener("click",(()=>(w.classList.remove("hide"),t.childNodes[1].textContent!==e.textContent&&(t.childNodes[1].textContent=e.textContent,E(),0))))}))};(()=>{const e=document.querySelector(".menu"),t=document.querySelector(".projects"),n=document.querySelector(".task-list"),o=document.querySelector(".tasks"),c=document.querySelector(".task"),s=document.querySelector(".add-task"),d=document.querySelector(".vertical"),i=document.querySelector(".horizontol"),u=document.querySelector(".add-task-form");n.children[0].textContent="Casual",e.addEventListener("click",(()=>{q.childElementCount>2&&document.querySelectorAll(".new-project-title").forEach((e=>{e.classList.toggle("show")})),e.classList.toggle("change"),t.classList.toggle("show"),n.classList.toggle("show"),u.classList.toggle("show"),L.classList.remove("show"),o.classList.toggle("show"),c.classList.toggle("show")})),s.addEventListener("click",(()=>{d.classList.toggle("adding"),i.classList.toggle("adding"),u.classList.toggle("adding"),e.parentNode.parentNode.classList.add("show"),document.querySelector(".form-date").value=(new Date).toJSON().slice(0,10)})),document.querySelector(".all-task").addEventListener("click",(()=>{for(w.classList.remove("hide"),w.classList.add("hide");f.childElementCount>1;)f.lastChild.remove();S.textContent="All Task";for(let e=0;e<r.length;e+=1)new a(r[e].project,r[e].title,r[e].date,r[e].type,r[e].status).addingNewTask();l()})),document.querySelector(".today").addEventListener("click",(()=>{for(w.classList.remove("hide"),w.classList.add("hide");f.childElementCount>1;)f.lastChild.remove();S.textContent="Today";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<r.length;t+=1)e===r[t].date&&new a(r[t].project,r[t].title,r[t].date,r[t].type,r[t].status).addingNewTask();l()})),document.querySelector(".this-week").addEventListener("click",(()=>{for(w.classList.remove("hide"),w.classList.add("hide");f.childElementCount>1;)f.lastChild.remove();S.textContent="This Week";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<r.length;t+=1){const n=r[t].date.split("-"),o=e.split("-");y(new Date(o[0],o[1],o[2]),new Date(n[0],n[1],n[2]))&&new a(r[t].project,r[t].title,r[t].date,r[t].type,r[t].status).addingNewTask()}l()}))})(),j(),k.addEventListener("click",(()=>{L.classList.add("show")})),C.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".projectAddPopup"),o=document.createElement("div");o.classList.add("new-project-title"),q.insertBefore(o,q.children[q.childElementCount-1]);const c=new Image;c.src=t,o.appendChild(c);const s=document.createElement("button");s.id="project",s.textContent=e.value,o.appendChild(s);const l=document.querySelector(".task-list");l.childNodes[1].textContent=e.value,E(),e.value="",L.classList.remove("show");const a=new Image;a.src=n,o.appendChild(a),a.addEventListener("click",(()=>{const e=a.parentNode.children[1].textContent;if(1===b.childElementCount)a.parentNode.remove(),l.childNodes[1].textContent="Casual",E();else{for(let t=0;t<=r.length;t+=1)e===r[t].project&&r.splice(t,1);a.parentNode.remove(),l.childNodes[1].textContent="Casual",E()}})),j()})()})),N.addEventListener("click",(e=>{const t=document.querySelector(".projectAddPopup");e.preventDefault(),L.classList.remove("show"),t.value=""})),(()=>{const e=document.querySelector(".add-task-button"),t=document.querySelector(".cancel-task-button"),n=document.querySelector(".vertical"),o=document.querySelector(".horizontol");e.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".form-name"),t=document.querySelector(".form-date"),n=document.querySelector(".form-type"),o=document.querySelector(".task-list").children[0].textContent,c=e.value,s=t.value,l=n.value,d=document.querySelector(".add-task-form"),i=new a(o,c,s,l,"incomplete");i.addingNewTask(),r.push(i),e.value="",t.value=(new Date).toJSON().slice(0,10),n.value="Normal",d.classList.remove("adding")})(),n.classList.remove("adding"),o.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show")})),t.addEventListener("click",(e=>{e.preventDefault(),n.classList.remove("adding"),o.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show"),t.parentNode.parentNode.parentNode.classList.remove("adding")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,