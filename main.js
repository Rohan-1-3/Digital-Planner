(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var n=e.g.document;if(!t&&n&&(n.currentScript&&(t=n.currentScript.src),!t)){var o=n.getElementsByTagName("script");o.length&&(t=o[o.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"1f757ac1762962d60ddc.png",n=e.p+"d367d5dbff6ca8e7e2f2.png",o=e.p+"df3b5dddd60da7069980.png",r=e.p+"d746fdde6c6bcecb1e30.png",c=e.p+"fe50e1a3f0405d606b0c.png",s=e.p+"cfabfc38136dc55a9a0d.png",l=document.querySelector(".edit-task-form"),a=document.querySelector(".main-container"),d=()=>{const e=document.querySelector(".edit-icon"),t=document.querySelector(".task-list").children[0].textContent;e.addEventListener("click",(()=>{const n=e.parentNode.parentNode.children[0],o=e.parentNode.parentNode.children[1],r=e.parentNode.parentNode.children[2],c=document.querySelector(".edit-name"),s=document.querySelector(".edit-date"),d=document.querySelector(".edit-type"),u=document.querySelector(".edit-task-button");s.value=(new Date).toJSON().slice(0,10),u.addEventListener("click",(e=>{e.preventDefault();for(let e=0;e<i.length;e+=1)n.textContent.toLowerCase()===i[e].title.toLowerCase()&&(i[e].title=`${c.value} (${t})`,i[e].date=s.value,i[e].type=d.value);n.textContent=`${c.value} (${t})`,o.textContent=s.value,r.textContent=d.value,l.classList.remove("adding"),a.classList.remove("show")})),l.classList.add("adding"),a.classList.add("show")}))},i=[],u=()=>{const e=document.querySelector(".tasks"),t=document.querySelector(".bg-image");e.childElementCount>1?t.src=c:1===e.childElementCount&&(t.src=s)},m=class{constructor(e,t,n,o,r){this.project=e,this.title=t,this.date=n,this.type=o,this.status=r}addingNewTask(){const e=document.querySelector(".tasks"),t=document.createElement("div");t.classList.add("task");const c=document.createElement("p");c.textContent=this.title;const s=document.createElement("p");s.textContent=this.date;const l=document.createElement("p");l.textContent=this.type;const a=document.createElement("div");a.classList.add("task-option");const d=new Image;d.src=o;const m=new Image;m.src=n;const p=new Image;p.classList.add("edit-icon"),p.src=r,"complete"===this.status&&t.classList.add("complete"),e.appendChild(t),t.appendChild(c),t.appendChild(s),t.appendChild(l),t.appendChild(a),a.appendChild(d),a.appendChild(m),a.appendChild(p),u(),d.addEventListener("click",(()=>{const e=d.parentNode.parentNode.children[0].textContent;for(let t=0;t<i.length;t+=1)e===i[t].title&&("complete"===i[t].status?i[t].status="incomplete":"incomplete"===i[t].status&&(i[t].status="complete"));d.parentNode.parentNode.classList.toggle("complete")})),m.addEventListener("click",(()=>{const e=m.parentNode.parentNode.children[0].textContent;for(let t=0;t<i.length;t+=1)e===i[t].title&&i.splice(t,1);m.parentNode.parentNode.remove(),u()}))}};function p(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function v(e){p(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===h(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function g(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var y={};function f(){return y}function w(e,t){var n,o,r,c,s,l,a,d;p(1,arguments);var i=f(),u=g(null!==(n=null!==(o=null!==(r=null!==(c=null==t?void 0:t.weekStartsOn)&&void 0!==c?c:null==t||null===(s=t.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:i.weekStartsOn)&&void 0!==o?o:null===(a=i.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==n?n:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=v(e),h=m.getDay(),y=(h<u?7:0)+h-u;return m.setDate(m.getDate()-y),m.setHours(0,0,0,0),m}function S(e,t,n){p(2,arguments);var o=w(e,n),r=w(t,n);return o.getTime()===r.getTime()}function L(e,t){return p(2,arguments),S(e,t,{weekStartsOn:1})}const C=document.querySelector(".tasks"),k=document.querySelector(".task-list").children[0],q=document.querySelector(".add-task"),N=document.querySelector(".new-project"),b=document.querySelector(".project-form"),E=document.querySelector(".add-button"),x=document.querySelector(".new-projects"),j=document.querySelector(".cancle-button"),D=document.querySelector(".tasks"),T=[],O=()=>{for(;D.childElementCount>1;)D.lastChild.remove();const e=document.querySelector(".task-list").children[0].textContent;for(let t=0;t<i.length;t+=1)e===i[t].project&&new m(i[t].project,i[t].title,i[t].date,i[t].type,i[t].status).addingNewTask();u()},$=()=>{const e=document.querySelectorAll("#project"),t=document.querySelector(".task-list");e.forEach((e=>{e.addEventListener("click",(()=>(q.classList.remove("hide"),t.childNodes[1].textContent!==e.textContent&&(t.childNodes[1].textContent=e.textContent,O(),d(),0))))}))};(()=>{const e=document.querySelector(".menu"),t=document.querySelector(".projects"),n=document.querySelector(".task-list"),o=document.querySelector(".tasks"),r=document.querySelector(".task"),c=document.querySelector(".add-task"),s=document.querySelector(".vertical"),l=document.querySelector(".horizontol"),a=document.querySelector(".add-task-form");n.children[0].textContent="Casual",e.addEventListener("click",(()=>{x.childElementCount>2&&document.querySelectorAll(".new-project-title").forEach((e=>{e.classList.toggle("show")})),e.classList.toggle("change"),t.classList.toggle("show"),n.classList.toggle("show"),a.classList.toggle("show"),b.classList.remove("show"),o.classList.toggle("show"),r.classList.toggle("show")})),c.addEventListener("click",(()=>{s.classList.toggle("adding"),l.classList.toggle("adding"),a.classList.toggle("adding"),e.parentNode.parentNode.classList.add("show"),document.querySelector(".form-date").value=(new Date).toJSON().slice(0,10)})),document.querySelector(".all-task").addEventListener("click",(()=>{for(q.classList.remove("hide"),q.classList.add("hide");C.childElementCount>1;)C.lastChild.remove();k.textContent="All Task";for(let e=0;e<i.length;e+=1)new m(i[e].project,i[e].title,i[e].date,i[e].type,i[e].status).addingNewTask();u()})),document.querySelector(".today").addEventListener("click",(()=>{for(q.classList.remove("hide"),q.classList.add("hide");C.childElementCount>1;)C.lastChild.remove();k.textContent="Today";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<i.length;t+=1)e===i[t].date&&new m(i[t].project,i[t].title,i[t].date,i[t].type,i[t].status).addingNewTask();u()})),document.querySelector(".this-week").addEventListener("click",(()=>{for(q.classList.remove("hide"),q.classList.add("hide");C.childElementCount>1;)C.lastChild.remove();k.textContent="This Week";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<i.length;t+=1){const n=i[t].date.split("-"),o=e.split("-");L(new Date(o[0],o[1],o[2]),new Date(n[0],n[1],n[2]))&&new m(i[t].project,i[t].title,i[t].date,i[t].type,i[t].status).addingNewTask()}u()}))})(),$(),N.addEventListener("click",(()=>{b.classList.add("show")})),E.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".projectAddPopup");if(""===e.value)return!1;for(let t=0;t<T.length;t+=1)if(e.value.toLowerCase()===T[t])return e.style.borderColor="red",!1;const o=document.createElement("div");o.classList.add("new-project-title"),x.insertBefore(o,x.children[x.childElementCount-1]);const r=new Image;r.src=t,o.appendChild(r);const c=document.createElement("button");c.id="project",c.textContent=e.value,o.appendChild(c);const s=document.querySelector(".task-list");s.childNodes[1].textContent=e.value,O(),T.push(e.value.toLowerCase()),q.classList.remove("hide"),e.value="",b.classList.remove("show");const l=new Image;l.src=n,o.appendChild(l),l.addEventListener("click",(()=>{const e=l.parentNode.children[1].textContent;if(1===D.childElementCount)l.parentNode.remove(),s.childNodes[1].textContent="Casual",O();else{for(let t=0;t<=i.length;t+=1)e===i[t].project&&i.splice(t,1);for(let t=0;t<=T.length;t+=1)e===T[t]&&T.splice(t,1);l.parentNode.remove(),s.childNodes[1].textContent="Casual",O()}})),$()})()})),j.addEventListener("click",(e=>{const t=document.querySelector(".projectAddPopup");e.preventDefault(),b.classList.remove("show"),t.value=""})),(()=>{const e=document.querySelector(".add-task-button"),t=document.querySelector(".cancel-task-button"),n=document.querySelector(".vertical"),o=document.querySelector(".horizontol");e.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".form-name"),t=document.querySelector(".form-date"),n=document.querySelector(".form-type"),o=document.querySelector(".task-list").children[0].textContent,r=`${e.value} (${o})`,c=t.value,s=n.value;if(""===e.value)return alert("Enter some Task Name"),!1;for(let e=0;e<i.length;e+=1)if(r.toLowerCase()===i[e].title.toLowerCase())return alert("Task Already Exists"),!1;const l=new m(o,r,c,s,"incomplete");l.addingNewTask(),i.push(l),console.log(i),e.value="",t.value=(new Date).toJSON().slice(0,10),n.value="Normal",d()})(),document.querySelector(".add-task-form").classList.remove("adding"),n.classList.remove("adding"),o.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show")})),t.addEventListener("click",(e=>{e.preventDefault(),n.classList.remove("adding"),o.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show"),t.parentNode.parentNode.parentNode.classList.remove("adding")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,