(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var o=e.g.document;if(!t&&o&&(o.currentScript&&(t=o.currentScript.src),!t)){var n=o.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"1f757ac1762962d60ddc.png",o=e.p+"d367d5dbff6ca8e7e2f2.png",n=e.p+"df3b5dddd60da7069980.png",r=e.p+"fe50e1a3f0405d606b0c.png",s=e.p+"cfabfc38136dc55a9a0d.png",c=[],l=()=>{const e=document.querySelector(".tasks"),t=document.querySelector(".bg-image");e.childElementCount>1?t.src=r:1===e.childElementCount&&(t.src=s)},a=class{constructor(e,t,o,n,r){this.project=e,this.title=t,this.date=o,this.type=n,this.status=r}addingNewTask(){const e=document.querySelector(".tasks"),t=document.createElement("div");t.classList.add("task");const r=document.createElement("p");r.textContent=this.title;const s=document.createElement("p");s.textContent=this.date;const a=document.createElement("p");a.textContent=this.type;const d=document.createElement("div");d.classList.add("task-option");const i=new Image;i.src=n;const u=new Image;u.src=o,"complete"===this.status&&t.classList.add("complete"),e.appendChild(t),t.appendChild(r),t.appendChild(s),t.appendChild(a),t.appendChild(d),d.appendChild(i),d.appendChild(u),l(),i.addEventListener("click",(()=>{const e=i.parentNode.parentNode.children[0].textContent;for(let t=0;t<c.length;t+=1)e===c[t].title&&("complete"===c[t].status?c[t].status="incomplete":"incomplete"===c[t].status&&(c[t].status="complete"));i.parentNode.parentNode.classList.toggle("complete")})),u.addEventListener("click",(()=>{const e=u.parentNode.parentNode.children[0].textContent;for(let t=0;t<c.length;t+=1)e===c[t].title&&c.splice(t,1);u.parentNode.parentNode.remove(),l()}))}};function d(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function i(e){return i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function u(e){d(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===i(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function m(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var p={};function h(){return p}function g(e,t){var o,n,r,s,c,l,a,i;d(1,arguments);var p=h(),g=m(null!==(o=null!==(n=null!==(r=null!==(s=null==t?void 0:t.weekStartsOn)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:p.weekStartsOn)&&void 0!==n?n:null===(a=p.locale)||void 0===a||null===(i=a.options)||void 0===i?void 0:i.weekStartsOn)&&void 0!==o?o:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var v=u(e),y=v.getDay(),f=(y<g?7:0)+y-g;return v.setDate(v.getDate()-f),v.setHours(0,0,0,0),v}function v(e,t,o){d(2,arguments);var n=g(e,o),r=g(t,o);return n.getTime()===r.getTime()}function y(e,t){return d(2,arguments),v(e,t,{weekStartsOn:1})}const f=document.querySelector(".tasks"),w=document.querySelector(".task-list").children[0],S=document.querySelector(".add-task"),L=document.querySelector(".new-project"),k=document.querySelector(".project-form"),C=document.querySelector(".add-button"),q=document.querySelector(".new-projects"),N=document.querySelector(".cancle-button"),b=document.querySelector(".tasks"),E=[],j=()=>{for(;b.childElementCount>1;)b.lastChild.remove();const e=document.querySelector(".task-list").children[0].textContent;for(let t=0;t<c.length;t+=1)e===c[t].project&&new a(c[t].project,c[t].title,c[t].date,c[t].type,c[t].status).addingNewTask();l()},x=()=>{const e=document.querySelectorAll("#project"),t=document.querySelector(".task-list");e.forEach((e=>{e.addEventListener("click",(()=>(S.classList.remove("hide"),t.childNodes[1].textContent!==e.textContent&&(t.childNodes[1].textContent=e.textContent,j(),0))))}))};(()=>{const e=document.querySelector(".menu"),t=document.querySelector(".projects"),o=document.querySelector(".task-list"),n=document.querySelector(".tasks"),r=document.querySelector(".task"),s=document.querySelector(".add-task"),d=document.querySelector(".vertical"),i=document.querySelector(".horizontol"),u=document.querySelector(".add-task-form");o.children[0].textContent="Casual",e.addEventListener("click",(()=>{q.childElementCount>2&&document.querySelectorAll(".new-project-title").forEach((e=>{e.classList.toggle("show")})),e.classList.toggle("change"),t.classList.toggle("show"),o.classList.toggle("show"),u.classList.toggle("show"),k.classList.remove("show"),n.classList.toggle("show"),r.classList.toggle("show")})),s.addEventListener("click",(()=>{d.classList.toggle("adding"),i.classList.toggle("adding"),u.classList.toggle("adding"),e.parentNode.parentNode.classList.add("show"),document.querySelector(".form-date").value=(new Date).toJSON().slice(0,10)})),document.querySelector(".all-task").addEventListener("click",(()=>{for(S.classList.remove("hide"),S.classList.add("hide");f.childElementCount>1;)f.lastChild.remove();w.textContent="All Task";for(let e=0;e<c.length;e+=1)new a(c[e].project,c[e].title,c[e].date,c[e].type,c[e].status).addingNewTask();l()})),document.querySelector(".today").addEventListener("click",(()=>{for(S.classList.remove("hide"),S.classList.add("hide");f.childElementCount>1;)f.lastChild.remove();w.textContent="Today";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<c.length;t+=1)e===c[t].date&&new a(c[t].project,c[t].title,c[t].date,c[t].type,c[t].status).addingNewTask();l()})),document.querySelector(".this-week").addEventListener("click",(()=>{for(S.classList.remove("hide"),S.classList.add("hide");f.childElementCount>1;)f.lastChild.remove();w.textContent="This Week";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<c.length;t+=1){const o=c[t].date.split("-"),n=e.split("-");y(new Date(n[0],n[1],n[2]),new Date(o[0],o[1],o[2]))&&new a(c[t].project,c[t].title,c[t].date,c[t].type,c[t].status).addingNewTask()}l()}))})(),x(),L.addEventListener("click",(()=>{k.classList.add("show")})),C.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".projectAddPopup");for(let t=0;t<E.length;t+=1)if(e.value.toLowerCase()===E[t])return e.style.borderColor="red",!1;const n=document.createElement("div");n.classList.add("new-project-title"),q.insertBefore(n,q.children[q.childElementCount-1]);const r=new Image;r.src=t,n.appendChild(r);const s=document.createElement("button");s.id="project",s.textContent=e.value,n.appendChild(s);const l=document.querySelector(".task-list");l.childNodes[1].textContent=e.value,j(),E.push(e.value.toLowerCase()),console.log(E),S.classList.remove("hide"),e.value="",k.classList.remove("show");const a=new Image;a.src=o,n.appendChild(a),a.addEventListener("click",(()=>{const e=a.parentNode.children[1].textContent;if(1===b.childElementCount)a.parentNode.remove(),l.childNodes[1].textContent="Casual",j();else{for(let t=0;t<=c.length;t+=1)e===c[t].project&&c.splice(t,1);a.parentNode.remove(),l.childNodes[1].textContent="Casual",j()}})),x()})()})),N.addEventListener("click",(e=>{const t=document.querySelector(".projectAddPopup");e.preventDefault(),k.classList.remove("show"),t.value=""})),(()=>{const e=document.querySelector(".add-task-button"),t=document.querySelector(".cancel-task-button"),o=document.querySelector(".vertical"),n=document.querySelector(".horizontol");e.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".form-name"),t=document.querySelector(".form-date"),o=document.querySelector(".form-type"),n=document.querySelector(".task-list").children[0].textContent,r=`${e.value}(${n})`,s=t.value,l=o.value;for(let e=0;e<c.length;e+=1)if(r.toLowerCase()===c[e].title.toLowerCase())return alert("Task Already Exists"),!1;const d=new a(n,r,s,l,"incomplete");d.addingNewTask(),c.push(d),e.value="",t.value=(new Date).toJSON().slice(0,10),o.value="Normal"})(),document.querySelector(".add-task-form").classList.remove("adding"),o.classList.remove("adding"),n.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show")})),t.addEventListener("click",(e=>{e.preventDefault(),o.classList.remove("adding"),n.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show"),t.parentNode.parentNode.parentNode.classList.remove("adding")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,