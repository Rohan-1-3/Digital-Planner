(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var o=e.g.document;if(!t&&o&&(o.currentScript&&(t=o.currentScript.src),!t)){var n=o.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"1f757ac1762962d60ddc.png",o=e.p+"d367d5dbff6ca8e7e2f2.png",n=e.p+"df3b5dddd60da7069980.png",r=e.p+"d746fdde6c6bcecb1e30.png",l=e.p+"fe50e1a3f0405d606b0c.png",c=e.p+"cfabfc38136dc55a9a0d.png",s=document.querySelector(".edit-task-form"),a=document.querySelector(".main-container"),d=document.querySelector(".edit-name"),i=document.querySelector(".edit-date"),u=document.querySelector(".edit-type"),m=document.querySelector(".edit-task-button"),p=()=>{document.querySelectorAll(".edit-icon").forEach((e=>{e.addEventListener("click",(()=>{e.classList.remove("event");const t=e.parentNode.parentNode.children[0].textContent,o=t.split(" ");d.value=o.splice(0,o.length-1).join(" "),i.value=(new Date).toJSON().slice(0,10),s.classList.add("adding"),a.classList.add("show"),m.addEventListener("click",(e=>{e.preventDefault(),(e=>{for(let t=0;t<g.length;t+=1){const o=document.querySelector(".task-list").children[0];if(e.toLowerCase()===g[t].title.toLowerCase())return g[t].title=`${d.value} (${o.textContent})`,g[t].date=i.value,g[t].type=u.value,console.log(g),z(),!0}})(t),s.classList.remove("adding"),a.classList.remove("show")}))}))}))},g=[];for(let e=0;e<localStorage.length;e+=1)g.push(JSON.parse(localStorage.getItem(e)));const h=()=>{const e=document.querySelector(".tasks"),t=document.querySelector(".bg-image");e.childElementCount>1?t.src=l:1===e.childElementCount&&(t.src=c)},v=class{constructor(e,t,o,n,r){this.project=e,this.title=t,this.date=o,this.type=n,this.status=r}addingNewTask(){const e=document.querySelector(".tasks"),t=document.createElement("div");t.classList.add("task");const l=document.createElement("p");l.textContent=this.title;const c=document.createElement("p");c.textContent=this.date;const s=document.createElement("p");s.textContent=this.type;const a=document.createElement("div");a.classList.add("task-option");const d=new Image;d.src=n;const i=new Image;i.src=o;const u=new Image;u.classList.add("edit-icon"),u.src=r,"complete"===this.status&&t.classList.add("complete"),e.appendChild(t),t.appendChild(l),t.appendChild(c),t.appendChild(s),t.appendChild(a),a.appendChild(d),a.appendChild(i),a.appendChild(u),h(),d.addEventListener("click",(()=>{const e=d.parentNode.parentNode.children[0].textContent;for(let t=0;t<g.length;t+=1)e===g[t].title&&("complete"===g[t].status?g[t].status="incomplete":"incomplete"===g[t].status&&(g[t].status="complete"));d.parentNode.parentNode.classList.toggle("complete")})),i.addEventListener("click",(()=>{const e=i.parentNode.parentNode.children[0].textContent;for(let t=0;t<g.length;t+=1)if(e===g[t].title)if(g.splice(t,1),t===localStorage.length-1)localStorage.removeItem(t);else{for(let e=t;e<localStorage.length;e+=1)localStorage.setItem(e,localStorage.getItem(e+1));localStorage.removeItem(localStorage.length-1)}i.parentNode.parentNode.remove(),h()}))}};function S(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function y(e){S(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===f(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var L={};function k(){return L}function C(e,t){var o,n,r,l,c,s,a,d;S(1,arguments);var i=k(),u=w(null!==(o=null!==(n=null!==(r=null!==(l=null==t?void 0:t.weekStartsOn)&&void 0!==l?l:null==t||null===(c=t.locale)||void 0===c||null===(s=c.options)||void 0===s?void 0:s.weekStartsOn)&&void 0!==r?r:i.weekStartsOn)&&void 0!==n?n:null===(a=i.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=y(e),p=m.getDay(),g=(p<u?7:0)+p-u;return m.setDate(m.getDate()-g),m.setHours(0,0,0,0),m}function q(e,t,o){S(2,arguments);var n=C(e,o),r=C(t,o);return n.getTime()===r.getTime()}function N(e,t){return S(2,arguments),q(e,t,{weekStartsOn:1})}const E=document.querySelector(".tasks"),b=document.querySelector(".task-list").children[0],j=document.querySelector(".add-task"),x=()=>{document.querySelectorAll(".edit-icon").forEach((e=>{e.classList.add("event")}))},D=document.querySelector(".new-project"),T=document.querySelector(".project-form"),I=document.querySelector(".add-button"),O=document.querySelector(".new-projects"),A=document.querySelector(".cancle-button"),J=document.querySelector(".tasks"),P=[];for(let e=0;e<localStorage.length;e+=1){const t=JSON.parse(localStorage.getItem(e)).project;"casual"!==t.toLowerCase()&&P.push(t)}const $=[...new Set(P)],z=()=>{for(;J.childElementCount>1;)J.lastChild.remove();const e=document.querySelector(".task-list").children[0].textContent;for(let t=0;t<g.length;t+=1)e===g[t].project&&new v(g[t].project,g[t].title,g[t].date,g[t].type,g[t].status).addingNewTask();h(),p()},B=()=>{const e=document.querySelectorAll("#project"),t=document.querySelector(".task-list");e.forEach((e=>{e.addEventListener("click",(()=>(j.classList.remove("hide"),t.childNodes[1].textContent!==e.textContent&&(t.childNodes[1].textContent=e.textContent,z(),0))))}))},M=class{constructor(e){this.title=e}addProject(){const e=document.createElement("div");e.classList.add("new-project-title"),O.insertBefore(e,O.children[O.childElementCount-1]);const n=new Image;n.src=t,e.appendChild(n);const r=document.createElement("button");r.id="project",r.textContent=this.title,e.appendChild(r);const l=document.querySelector(".task-list");l.childNodes[1].textContent=this.title,z();const c=new Image;return c.src=o,e.appendChild(c),T.classList.remove("show"),j.classList.remove("hide"),c.addEventListener("click",(()=>{const e=c.parentNode.children[1].textContent;if(1===J.childElementCount)c.parentNode.remove(),l.childNodes[1].textContent="Casual",z();else{for(let t=0;t<=g.length;t+=1)if(e===g[t].project)if(g.splice(t,1),t===localStorage.length-1)localStorage.removeItem(t);else{for(let e=t;e<localStorage.length;e+=1)localStorage.setItem(e,localStorage.getItem(e+1));localStorage.removeItem(localStorage.length-1)}for(let t=0;t<=$.length;t+=1)e===$[t]&&$.splice(t,1);c.parentNode.remove(),l.childNodes[1].textContent="Casual",z()}})),B(),0}};(()=>{const e=document.querySelector(".menu"),t=document.querySelector(".projects"),o=document.querySelector(".task-list"),n=document.querySelector(".tasks"),r=document.querySelector(".task"),l=document.querySelector(".add-task"),c=document.querySelector(".vertical"),s=document.querySelector(".horizontol"),a=document.querySelector(".add-task-form");o.children[0].textContent="Casual",e.addEventListener("click",(()=>{O.childElementCount>2&&document.querySelectorAll(".new-project-title").forEach((e=>{e.classList.toggle("show")})),e.classList.toggle("change"),t.classList.toggle("show"),o.classList.toggle("show"),a.classList.toggle("show"),T.classList.remove("show"),n.classList.toggle("show"),r.classList.toggle("show")})),l.addEventListener("click",(()=>{c.classList.toggle("adding"),s.classList.toggle("adding"),a.classList.toggle("adding"),e.parentNode.parentNode.classList.add("show"),document.querySelector(".form-date").value=(new Date).toJSON().slice(0,10)})),document.querySelector(".all-task").addEventListener("click",(()=>{for(j.classList.remove("hide"),j.classList.add("hide");E.childElementCount>1;)E.lastChild.remove();b.textContent="All Task";for(let e=0;e<g.length;e+=1)new v(g[e].project,g[e].title,g[e].date,g[e].type,g[e].status).addingNewTask();h(),x()})),document.querySelector(".today").addEventListener("click",(()=>{for(j.classList.remove("hide"),j.classList.add("hide");E.childElementCount>1;)E.lastChild.remove();b.textContent="Today";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<g.length;t+=1)e===g[t].date&&new v(g[t].project,g[t].title,g[t].date,g[t].type,g[t].status).addingNewTask();h(),x()})),document.querySelector(".this-week").addEventListener("click",(()=>{for(j.classList.remove("hide"),j.classList.add("hide");E.childElementCount>1;)E.lastChild.remove();b.textContent="This Week";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<g.length;t+=1){const o=g[t].date.split("-"),n=e.split("-");N(new Date(n[0],n[1],n[2]),new Date(o[0],o[1],o[2]))&&new v(g[t].project,g[t].title,g[t].date,g[t].type,g[t].status).addingNewTask()}h(),x()}))})(),B(),(()=>{for(let e=0;e<g.length;e+=1){const t=new v(g[e].project,g[e].title,g[e].date,g[e].type,g[e].status);"casual"===g[e].project.toLowerCase()&&t.addingNewTask()}})(),D.addEventListener("click",(()=>{T.classList.add("show")})),I.addEventListener("click",(e=>{e.preventDefault();const t=document.querySelector(".projectAddPopup");if(""===t.value)return!1;for(let e=0;e<$.length;e+=1)if(t.value.toLowerCase()===$[e])return t.style.borderColor="red",!1;return new M(t.value).addProject(),$.push(t.value.toLowerCase()),console.log($),t.value="",0})),A.addEventListener("click",(e=>{const t=document.querySelector(".projectAddPopup");e.preventDefault(),T.classList.remove("show"),t.value=""})),(()=>{for(let e=0;e<$.length;e+=1)new M($[e]).addProject(),document.querySelectorAll(".new-project-title").forEach((e=>{e.classList.add("show")}))})(),(()=>{const e=document.querySelector(".add-task-button"),t=document.querySelector(".cancel-task-button"),o=document.querySelector(".vertical"),n=document.querySelector(".horizontol");e.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".form-name"),t=document.querySelector(".form-date"),o=document.querySelector(".form-type"),n=document.querySelector(".task-list").children[0].textContent,r=`${e.value} (${n})`,l=t.value,c=o.value;if(""===e.value)return alert("Enter some Task Name"),!1;for(let e=0;e<g.length;e+=1)if(r.toLowerCase()===g[e].title.toLowerCase())return alert("Task Already Exists"),!1;const s=new v(n,r,l,c,"incomplete");s.addingNewTask(),g.push(s),localStorage.setItem(localStorage.length,JSON.stringify(s)),e.value="",t.value=(new Date).toJSON().slice(0,10),o.value="Normal"})(),p(),document.querySelector(".add-task-form").classList.remove("adding"),o.classList.remove("adding"),n.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show")})),t.addEventListener("click",(e=>{e.preventDefault(),o.classList.remove("adding"),n.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show"),t.parentNode.parentNode.parentNode.classList.remove("adding")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,