(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var t;e.g.importScripts&&(t=e.g.location+"");var o=e.g.document;if(!t&&o&&(o.currentScript&&(t=o.currentScript.src),!t)){var n=o.getElementsByTagName("script");n.length&&(t=n[n.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=t})();const t=e.p+"1f757ac1762962d60ddc.png",o=e.p+"d367d5dbff6ca8e7e2f2.png",n=e.p+"df3b5dddd60da7069980.png",r=e.p+"d746fdde6c6bcecb1e30.png",s=e.p+"fe50e1a3f0405d606b0c.png",c=e.p+"cfabfc38136dc55a9a0d.png",l=document.querySelector(".edit-task-form"),a=document.querySelector(".main-container"),d=document.querySelector(".edit-name"),i=document.querySelector(".edit-date"),u=document.querySelector(".edit-type"),m=document.querySelector(".edit-task-button"),p=()=>{document.querySelectorAll(".edit-icon").forEach((e=>{e.addEventListener("click",(()=>{e.classList.remove("event");const t=e.parentNode.parentNode.children[0].textContent,o=t.split(" ");d.value=o.splice(0,o.length-1).join(" "),i.value=(new Date).toJSON().slice(0,10),l.classList.add("adding"),a.classList.add("show"),m.addEventListener("click",(e=>{e.preventDefault(),(e=>{for(let t=0;t<h.length;t+=1){const o=document.querySelector(".task-list").children[0];if(e.toLowerCase()===h[t].title.toLowerCase())return h[t].title=`${d.value} (${o.textContent})`,h[t].date=i.value,h[t].type=u.value,console.log(h),P(),!0}})(t),l.classList.remove("adding"),a.classList.remove("show")}))}))}))},h=[];for(let e=0;e<localStorage.length;e+=1)h.push(JSON.parse(localStorage.getItem(e)));const g=()=>{const e=document.querySelector(".tasks"),t=document.querySelector(".bg-image");e.childElementCount>1?t.src=s:1===e.childElementCount&&(t.src=c)},v=class{constructor(e,t,o,n,r){this.project=e,this.title=t,this.date=o,this.type=n,this.status=r}addingNewTask(){const e=document.querySelector(".tasks"),t=document.createElement("div");t.classList.add("task");const s=document.createElement("p");s.textContent=this.title;const c=document.createElement("p");c.textContent=this.date;const l=document.createElement("p");l.textContent=this.type;const a=document.createElement("div");a.classList.add("task-option");const d=new Image;d.src=n;const i=new Image;i.src=o;const u=new Image;u.classList.add("edit-icon"),u.src=r,"complete"===this.status&&t.classList.add("complete"),e.appendChild(t),t.appendChild(s),t.appendChild(c),t.appendChild(l),t.appendChild(a),a.appendChild(d),a.appendChild(i),a.appendChild(u),g(),d.addEventListener("click",(()=>{const e=d.parentNode.parentNode.children[0].textContent;for(let t=0;t<h.length;t+=1)e===h[t].title&&("complete"===h[t].status?h[t].status="incomplete":"incomplete"===h[t].status&&(h[t].status="complete"));d.parentNode.parentNode.classList.toggle("complete")})),i.addEventListener("click",(()=>{const e=i.parentNode.parentNode.children[0].textContent;for(let t=0;t<h.length;t+=1)e===h[t].title&&h.splice(t,1);i.parentNode.parentNode.remove(),g()}))}};function y(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function f(e){return f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},f(e)}function S(e){y(1,arguments);var t=Object.prototype.toString.call(e);return e instanceof Date||"object"===f(e)&&"[object Date]"===t?new Date(e.getTime()):"number"==typeof e||"[object Number]"===t?new Date(e):("string"!=typeof e&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function w(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}var L={};function k(){return L}function C(e,t){var o,n,r,s,c,l,a,d;y(1,arguments);var i=k(),u=w(null!==(o=null!==(n=null!==(r=null!==(s=null==t?void 0:t.weekStartsOn)&&void 0!==s?s:null==t||null===(c=t.locale)||void 0===c||null===(l=c.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==r?r:i.weekStartsOn)&&void 0!==n?n:null===(a=i.locale)||void 0===a||null===(d=a.options)||void 0===d?void 0:d.weekStartsOn)&&void 0!==o?o:0);if(!(u>=0&&u<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var m=S(e),p=m.getDay(),h=(p<u?7:0)+p-u;return m.setDate(m.getDate()-h),m.setHours(0,0,0,0),m}function q(e,t,o){y(2,arguments);var n=C(e,o),r=C(t,o);return n.getTime()===r.getTime()}function N(e,t){return y(2,arguments),q(e,t,{weekStartsOn:1})}const E=document.querySelector(".tasks"),b=document.querySelector(".task-list").children[0],j=document.querySelector(".add-task"),x=()=>{document.querySelectorAll(".edit-icon").forEach((e=>{e.classList.add("event")}))},D=document.querySelector(".new-project"),T=document.querySelector(".project-form"),O=document.querySelector(".add-button"),A=document.querySelector(".new-projects"),I=document.querySelector(".cancle-button"),J=document.querySelector(".tasks"),$=[],P=()=>{for(;J.childElementCount>1;)J.lastChild.remove();const e=document.querySelector(".task-list").children[0].textContent;for(let t=0;t<h.length;t+=1)e===h[t].project&&new v(h[t].project,h[t].title,h[t].date,h[t].type,h[t].status).addingNewTask();g(),p()},z=()=>{const e=document.querySelectorAll("#project"),t=document.querySelector(".task-list");e.forEach((e=>{e.addEventListener("click",(()=>(j.classList.remove("hide"),t.childNodes[1].textContent!==e.textContent&&(t.childNodes[1].textContent=e.textContent,P(),0))))}))};(()=>{const e=document.querySelector(".menu"),t=document.querySelector(".projects"),o=document.querySelector(".task-list"),n=document.querySelector(".tasks"),r=document.querySelector(".task"),s=document.querySelector(".add-task"),c=document.querySelector(".vertical"),l=document.querySelector(".horizontol"),a=document.querySelector(".add-task-form");o.children[0].textContent="Casual",e.addEventListener("click",(()=>{A.childElementCount>2&&document.querySelectorAll(".new-project-title").forEach((e=>{e.classList.toggle("show")})),e.classList.toggle("change"),t.classList.toggle("show"),o.classList.toggle("show"),a.classList.toggle("show"),T.classList.remove("show"),n.classList.toggle("show"),r.classList.toggle("show")})),s.addEventListener("click",(()=>{c.classList.toggle("adding"),l.classList.toggle("adding"),a.classList.toggle("adding"),e.parentNode.parentNode.classList.add("show"),document.querySelector(".form-date").value=(new Date).toJSON().slice(0,10)})),document.querySelector(".all-task").addEventListener("click",(()=>{for(j.classList.remove("hide"),j.classList.add("hide");E.childElementCount>1;)E.lastChild.remove();b.textContent="All Task";for(let e=0;e<h.length;e+=1)new v(h[e].project,h[e].title,h[e].date,h[e].type,h[e].status).addingNewTask();g(),x()})),document.querySelector(".today").addEventListener("click",(()=>{for(j.classList.remove("hide"),j.classList.add("hide");E.childElementCount>1;)E.lastChild.remove();b.textContent="Today";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<h.length;t+=1)e===h[t].date&&new v(h[t].project,h[t].title,h[t].date,h[t].type,h[t].status).addingNewTask();g(),x()})),document.querySelector(".this-week").addEventListener("click",(()=>{for(j.classList.remove("hide"),j.classList.add("hide");E.childElementCount>1;)E.lastChild.remove();b.textContent="This Week";const e=(new Date).toJSON().slice(0,10);for(let t=0;t<h.length;t+=1){const o=h[t].date.split("-"),n=e.split("-");N(new Date(n[0],n[1],n[2]),new Date(o[0],o[1],o[2]))&&new v(h[t].project,h[t].title,h[t].date,h[t].type,h[t].status).addingNewTask()}g(),x()}))})(),z(),(()=>{for(let e=0;e<h.length;e+=1)new v(h[e].project,h[e].title,h[e].date,h[e].type,h[e].status).addingNewTask()})(),D.addEventListener("click",(()=>{T.classList.add("show")})),O.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".projectAddPopup");if(""===e.value)return!1;for(let t=0;t<$.length;t+=1)if(e.value.toLowerCase()===$[t])return e.style.borderColor="red",!1;const n=document.createElement("div");n.classList.add("new-project-title"),A.insertBefore(n,A.children[A.childElementCount-1]);const r=new Image;r.src=t,n.appendChild(r);const s=document.createElement("button");s.id="project",s.textContent=e.value,n.appendChild(s);const c=document.querySelector(".task-list");c.childNodes[1].textContent=e.value,P(),$.push(e.value.toLowerCase()),j.classList.remove("hide"),e.value="",T.classList.remove("show");const l=new Image;l.src=o,n.appendChild(l),l.addEventListener("click",(()=>{const e=l.parentNode.children[1].textContent;if(1===J.childElementCount)l.parentNode.remove(),c.childNodes[1].textContent="Casual",P();else{for(let t=0;t<=h.length;t+=1)e===h[t].project&&h.splice(t,1);for(let t=0;t<=$.length;t+=1)e===$[t]&&$.splice(t,1);l.parentNode.remove(),c.childNodes[1].textContent="Casual",P()}})),z()})()})),I.addEventListener("click",(e=>{const t=document.querySelector(".projectAddPopup");e.preventDefault(),T.classList.remove("show"),t.value=""})),(()=>{const e=document.querySelector(".add-task-button"),t=document.querySelector(".cancel-task-button"),o=document.querySelector(".vertical"),n=document.querySelector(".horizontol");e.addEventListener("click",(e=>{e.preventDefault(),(()=>{const e=document.querySelector(".form-name"),t=document.querySelector(".form-date"),o=document.querySelector(".form-type"),n=document.querySelector(".task-list").children[0].textContent,r=`${e.value} (${n})`,s=t.value,c=o.value;if(""===e.value)return alert("Enter some Task Name"),!1;for(let e=0;e<h.length;e+=1)if(r.toLowerCase()===h[e].title.toLowerCase())return alert("Task Already Exists"),!1;const l=new v(n,r,s,c,"incomplete");l.addingNewTask(),h.push(l),localStorage.setItem(localStorage.length,JSON.stringify(l)),e.value="",t.value=(new Date).toJSON().slice(0,10),o.value="Normal"})(),p(),document.querySelector(".add-task-form").classList.remove("adding"),o.classList.remove("adding"),n.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show")})),t.addEventListener("click",(e=>{e.preventDefault(),o.classList.remove("adding"),n.classList.remove("adding"),document.querySelector(".main-container").classList.remove("show"),t.parentNode.parentNode.parentNode.classList.remove("adding")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,